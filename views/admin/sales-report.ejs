<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FITBOY Admin - Sales Report</title>
    <link rel="stylesheet" href="/css/style.css">
    <!-- Bootstrap CSS (optional, remove if not needed) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Chart.js, jsPDF, XLSX, SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        /* Additional Styles for Enhanced Sales Report */
        .filter-bar {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .date-filter {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }

        .date-filter input[type="date"] {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .filter-options {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .filter-options select, 
        .filter-options button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            background-color: white;
        }

        .search-button, .action-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: space-between;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .search-button:hover, .action-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .report-actions {
            display: flex;
            gap: 10px;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .sales-icon {
            background: linear-gradient(135deg, #36d1dc 0%, #5b86e5 100%);
        }

        .orders-icon {
            background: linear-gradient(135deg, #f5515f 0%, #9f041b 100%);
        }

        .products-icon {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .discount-icon {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        }

        .stat-info {
            flex-grow: 1;
        }

        .stat-value {
            font-size: 24px;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 14px;
            color: #666;
        }

        .dashboard-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            overflow: hidden;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .card-header h2 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .card-content {
            padding: 20px;
        }

        .dashboard-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }

        .data-table th {
            background: #f8f9fa;
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #dee2e6;
        }

        .data-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
        }

        .data-table tr:hover {
            background: #f8f9fa;
        }

        .chart-container {
            width: 100%;
            height: 300px;
            background-color: #f9f9f9;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
            border-radius: 8px;
        }

        .date-preset-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .date-preset-btn {
            padding: 6px 12px;
            background-color: #f0f0f0;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.2s ease;
        }

        .date-preset-btn:hover, .date-preset-btn.active {
            background-color: #667eea;
            color: white;
            border-color: #667eea;
        }

        .download-options {
            position: relative;
            display: inline-block;
        }

        .download-btn {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .download-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border-radius: 4px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: none;
            z-index: 100;
            min-width: 150px;
        }

        .download-menu.show {
            display: block;
        }

        .download-option {
            padding: 10px 15px;
            cursor: pointer;
            transition: background 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .download-option:hover {
            background: #f8f9fa;
        }

        .download-option i {
            font-size: 16px;
        }

        .discount-details {
            margin-top: 15px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }

        .discount-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .discount-row:last-child {
            margin-bottom: 0;
            padding-top: 8px;
            border-top: 1px dashed #ddd;
            font-weight: 600;
        }

        .discount-label {
            color: #555;
        }

        .discount-value {
            font-weight: 500;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            visibility: hidden;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .loading-overlay.show {
            visibility: visible;
            opacity: 1;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(102, 126, 234, 0.3);
            border-radius: 50%;
            border-top-color: #667eea;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .filter-bar {
                flex-direction: column;
                align-items: stretch;
            }
            
            .date-filter, .filter-options {
                margin-bottom: 15px;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .report-actions {
                margin-top: 15px;
            }
            
            .stats-container {
                grid-template-columns: 1fr;
            }
            
            .dashboard-row {
                grid-template-columns: 1fr;
            }
        }

        .icon {
            display: inline-block;
            width: 24px;
            height: 24px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }

        .icon-dollar:before {
            content: "â¹";
            font-weight: bold;
        }

        .icon-cart:before {
            content: "ð";
        }

        .icon-tag:before {
            content: "ð·ï¸";
        }

        .icon-average:before {
            content: "ð";
        }
    </style>
</head>
<body>
    <div class="admin-container">
    <%- include('partials/sidebar', {page: 'product-management'}) %>
        
        <div class="main-content">
            <%- include('partials/header') %>
            
            <div class="dashboard-content">
                <div class="page-header">
                    <h1 class="page-title">Sales Report</h1>
                    <div class="report-actions">
                        <div class="download-options">
                            <button class="action-button download-btn" id="downloadBtn">
                                Download Report <span>â¼</span>
                            </button>
                            <div class="download-menu" id="downloadMenu">
                                <div class="download-option" data-format="pdf">
                                    <i class="icon">ð</i> PDF Report
                                </div>
                                <div class="download-option" data-format="excel">
                                    <i class="icon">ð</i> Excel Report
                                </div>
                            </div>
                        </div>
                        <button class="action-button" id="printReport">Print Report</button>
                    </div>
                </div>
                
                <div class="filter-bar">
                    <div>
                        <div class="date-preset-buttons">
                            <button class="date-preset-btn" data-period="today">Today</button>
                            <button class="date-preset-btn" data-period="yesterday">Yesterday</button>
                            <button class="date-preset-btn" data-period="week">This Week</button>
                            <button class="date-preset-btn active" data-period="month">This Month</button>
                            <button class="date-preset-btn" data-period="year">This Year</button>
                            <button class="date-preset-btn" data-period="custom">Custom Range</button>
                        </div>
                        <div class="date-filter" id="customDateRange" style="display: none;">
                            <input type="date" id="fromDate" placeholder="From Date">
                            <input type="date" id="toDate" placeholder="To Date">
                            <button class="search-button" id="applyCustomDate">Apply</button>
                        </div>
                    </div>
                    <div class="filter-options">
                        <select id="reportGrouping">
                            <option value="daily">Daily</option>
                            <option value="weekly">Weekly</option>
                            <option value="monthly" selected>Monthly</option>
                            <option value="yearly">Yearly</option>
                        </select>
                        <button class="search-button" id="refreshReport">Refresh Report</button>
                    </div>
                </div>
                
                <div class="stats-container">
                    <div class="stat-card">
                        <div class="stat-icon sales-icon">
                            <span class="icon-dollar"></span>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value" id="totalSales">â¹<%- typeof initialData !== 'undefined' && initialData.totalSales ? initialData.totalSales : '0.00' %></div>
                            <div class="stat-label">Total Sales</div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon orders-icon">
                            <span class="icon-cart"></span>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value" id="totalOrders"><%- typeof initialData !== 'undefined' && initialData.totalOrders ? initialData.totalOrders : 0 %></div>
                            <div class="stat-label">Orders</div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon products-icon">
                            <span class="icon-average"></span>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value" id="averageOrder">â¹<%- typeof initialData !== 'undefined' && initialData.averageOrder ? initialData.averageOrder : '0.00' %></div>
                            <div class="stat-label">Average Order</div>
                        </div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon discount-icon">
                            <span class="icon-tag"></span>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value" id="totalDiscount">â¹<%- typeof initialData !== 'undefined' && initialData.totalDiscount ? initialData.totalDiscount : '0.00' %></div>
                            <div class="stat-label">Total Discounts</div>
                        </div>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <h2>Sales Overview</h2>
                        <div id="reportPeriod"><%- typeof initialData !== 'undefined' && initialData.reportPeriod ? initialData.reportPeriod : 'Loading...' %></div>
                    </div>
                    <div class="card-content">
                        <div class="chart-container" id="salesChart">
                            <p>Sales Chart Loading...</p>
                        </div>
                        
                        <div class="discount-details">
                            <h3>Discount Breakdown</h3>
                            <div class="discount-row">
                                <span class="discount-label">Product Offers:</span>
                                <span class="discount-value" id="productDiscounts">â¹<%- typeof initialData !== 'undefined' && initialData.productDiscounts ? initialData.productDiscounts : '0.00' %></span>
                            </div>
                            <div class="discount-row">
                                <span class="discount-label">Category Offers:</span>
                                <span class="discount-value" id="categoryDiscounts">â¹<%- typeof initialData !== 'undefined' && initialData.categoryDiscounts ? initialData.categoryDiscounts : '0.00' %></span>
                            </div>
                            <div class="discount-row">
                                <span class="discount-label">Coupon Codes:</span>
                                <span class="discount-value" id="couponDiscounts">â¹<%- typeof initialData !== 'undefined' && initialData.couponDiscounts ? initialData.couponDiscounts : '0.00' %></span>
                            </div>
                            <div class="discount-row">
                                <span class="discount-label">Total Discount Value:</span>
                                <span class="discount-value" id="totalDiscountValue">â¹<%- typeof initialData !== 'undefined' && initialData.totalDiscount ? initialData.totalDiscount : '0.00' %></span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="dashboard-row">
                    <div class="dashboard-col">
                        <div class="dashboard-card">
                            <div class="card-header">
                                <h2>Top Selling Products</h2>
                            </div>
                            <div class="card-content">
                                <table class="data-table" id="topProductsTable">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Units Sold</th>
                                            <th>Revenue</th>
                                            <th>Discount</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Dynamically populated -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    
                    <div class="dashboard-col">
                        <div class="dashboard-card">
                            <div class="card-header">
                                <h2>Sales by Category</h2>
                            </div>
                            <div class="card-content">
                                <div class="chart-container" id="categoryChart">
                                    <p>Category Chart Loading...</p>
                                </div>
                                <table class="data-table" id="categorySalesTable">
                                    <thead>
                                        <tr>
                                            <th>Category</th>
                                            <th>Revenue</th>
                                            <th>Discount</th>
                                            <th>%</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Dynamically populated -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="loading-overlay" id="loadingOverlay">
                <div class="spinner"></div>
            </div>
            
            <%- include('partials/footer') %>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let currentPeriod = 'month';
            let currentGrouping = 'monthly';
            let salesChart = null;
            let categoryChart = null;

            // DOM elements
            const downloadBtn = document.getElementById('downloadBtn');
            const downloadMenu = document.getElementById('downloadMenu');
            const datePresetButtons = document.querySelectorAll('.date-preset-btn');
            const customDateRange = document.getElementById('customDateRange');
            const fromDateInput = document.getElementById('fromDate');
            const toDateInput = document.getElementById('toDate');
            const applyCustomDateBtn = document.getElementById('applyCustomDate');
            const reportGroupingSelect = document.getElementById('reportGrouping');
            const refreshReportBtn = document.getElementById('refreshReport');
            const printReportBtn = document.getElementById('printReport');
            const loadingOverlay = document.getElementById('loadingOverlay');
            const reportPeriodEl = document.getElementById('reportPeriod');

            // Set default dates
            setDefaultDates();

            // Initialize charts
            initCharts();

            // Event listeners
            downloadBtn.addEventListener('click', toggleDownloadMenu);
            document.addEventListener('click', closeDownloadMenuOutside);

            datePresetButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const period = this.getAttribute('data-period');
                    setActivePeriod(period);
                });
            });

            applyCustomDateBtn.addEventListener('click', applyCustomDateFilter);
            reportGroupingSelect.addEventListener('change', changeReportGrouping);
            refreshReportBtn.addEventListener('click', refreshReport);
            printReportBtn.addEventListener('click', printReport);

            document.querySelectorAll('.download-option').forEach(option => {
                option.addEventListener('click', function() {
                    const format = this.getAttribute('data-format');
                    downloadReport(format);
                });
            });

            // Functions
            function setDefaultDates() {
                const today = new Date();
                const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);

                fromDateInput.valueAsDate = firstDayOfMonth;
                toDateInput.valueAsDate = today;

                updateReportPeriodText(firstDayOfMonth, today);
            }

            function toggleDownloadMenu() {
                downloadMenu.classList.toggle('show');
            }

            function closeDownloadMenuOutside(event) {
                if (!downloadBtn.contains(event.target) && !downloadMenu.contains(event.target)) {
                    downloadMenu.classList.remove('show');
                }
            }

            function setActivePeriod(period) {
                currentPeriod = period;

                datePresetButtons.forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.getAttribute('data-period') === period) {
                        btn.classList.add('active');
                    }
                });

                if (period === 'custom') {
                    customDateRange.style.display = 'flex';
                } else {
                    customDateRange.style.display = 'none';

                    const dates = getDateRangeForPeriod(period);
                    fromDateInput.valueAsDate = dates.from;
                    toDateInput.valueAsDate = dates.to;

                    updateReportPeriodText(dates.from, dates.to);
                    loadReportData();
                }
            }

            function getDateRangeForPeriod(period) {
                const today = new Date();
                let fromDate, toDate;

                switch (period) {
                    case 'today':
                        fromDate = toDate = new Date(today);
                        break;
                    case 'yesterday':
                        fromDate = toDate = new Date(today.setDate(today.getDate() - 1));
                        break;
                    case 'week':
                        fromDate = new Date(today.setDate(today.getDate() - today.getDay()));
                        toDate = new Date(today);
                        break;
                    case 'month':
                        fromDate = new Date(today.getFullYear(), today.getMonth(), 1);
                        toDate = new Date(today);
                        break;
                    case 'year':
                        fromDate = new Date(today.getFullYear(), 0, 1);
                        toDate = new Date(today);
                        break;
                    default:
                        fromDate = new Date(today.getFullYear(), today.getMonth(), 1);
                        toDate = new Date(today);
                }

                return { from: fromDate, to: toDate };
            }

            function updateReportPeriodText(fromDate, toDate) {
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                reportPeriodEl.textContent = `${fromDate.toLocaleDateString(undefined, options)} - ${toDate.toLocaleDateString(undefined, options)}`;
            }

            function applyCustomDateFilter() {
                const fromDate = fromDateInput.valueAsDate;
                const toDate = toDateInput.valueAsDate;

                if (!fromDate || !toDate) {
                    Swal.fire('Error', 'Please select both from and to dates', 'error');
                    return;
                }

                if (fromDate > toDate) {
                    Swal.fire('Error', 'From date cannot be after to date', 'error');
                    return;
                }

                updateReportPeriodText(fromDate, toDate);
                loadReportData();
            }

            function changeReportGrouping() {
                currentGrouping = reportGroupingSelect.value;
                loadReportData();
            }

            function refreshReport() {
                loadReportData();
            }

            async function loadReportData() {
                showLoading();
                try {
                    const params = new URLSearchParams({
                        period: currentPeriod,
                        fromDate: fromDateInput.value,
                        toDate: toDateInput.value,
                        grouping: currentGrouping,
                    });

                    const response = await fetch(`/admin/api/sales-report?${params}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        credentials: 'include'
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const data = await response.json();

                    if (!data.success) {
                        throw new Error(data.message || 'Failed to load sales data');
                    }

                    // Update statistics
                    document.getElementById('totalSales').textContent = `â¹${data.totalSales}`;
                    document.getElementById('totalOrders').textContent = data.totalOrders;
                    document.getElementById('averageOrder').textContent = `â¹${data.averageOrder}`;
                    document.getElementById('totalDiscount').textContent = `â¹${data.totalDiscount}`;
                    document.getElementById('productDiscounts').textContent = `â¹${data.productDiscounts}`;
                    document.getElementById('couponDiscounts').textContent = `â¹${data.couponDiscounts}`;
                    document.getElementById('categoryDiscounts').textContent = `â¹${data.categoryDiscounts}`;
                    document.getElementById('totalDiscountValue').textContent = `â¹${data.totalDiscount}`;

                    // Update top products table
                    const topProductsTable = document.getElementById('topProductsTable').querySelector('tbody');
                    topProductsTable.innerHTML = data.topProducts
                        .map(p => `
                            <tr>
                                <td>${p.name}</td>
                                <td>${p.units}</td>
                                <td>â¹${p.revenue}</td>
                                <td>â¹${p.discount}</td>
                            </tr>
                        `)
                        .join('');

                    // Update category sales table
                    const categorySalesTable = document.getElementById('categorySalesTable').querySelector('tbody');
                    categorySalesTable.innerHTML = data.categorySales
                        .map(c => `
                            <tr>
                                <td>${c.name}</td>
                                <td>â¹${c.revenue}</td>
                                <td>â¹${c.discount}</td>
                                <td>${c.percentage}%</td>
                            </tr>
                        `)
                        .join('');

                    // Update charts
                    updateSalesChart(data.salesChartData);
                    updateCategoryChart(data.categorySales);
                } catch (error) {
                    console.error('Error loading report data:', error);
                    Swal.fire('Error', `Failed to load report data: ${error.message}`, 'error');
                } finally {
                    hideLoading();
                }
            }

            function showLoading() {
                loadingOverlay.classList.add('show');
            }

            function hideLoading() {
                loadingOverlay.classList.remove('show');
            }

            function initCharts() {
                const salesChartCtx = document.createElement('canvas');
                salesChartCtx.id = 'salesChartCanvas';
                salesChartCtx.style.width = '100%';
                salesChartCtx.style.height = '100%';
                document.getElementById('salesChart').innerHTML = '';
                document.getElementById('salesChart').appendChild(salesChartCtx);

                const categoryChartCtx = document.createElement('canvas');
                categoryChartCtx.id = 'categoryChartCanvas';
                categoryChartCtx.style.width = '100%';
                categoryChartCtx.style.height = '100%';
                document.getElementById('categoryChart').innerHTML = '';
                document.getElementById('categoryChart').appendChild(categoryChartCtx);
            }

            function updateSalesChart({ labels, sales, discounts }) {
                const ctx = document.getElementById('salesChartCanvas').getContext('2d');
                if (salesChart) salesChart.destroy();
                salesChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels,
                        datasets: [
                            {
                                label: 'Sales',
                                data: sales,
                                backgroundColor: 'rgba(102, 126, 234, 0.7)',
                                borderColor: 'rgba(102, 126, 234, 1)',
                                borderWidth: 1,
                            },
                            {
                                label: 'Discounts',
                                data: discounts,
                                backgroundColor: 'rgba(237, 100, 166, 0.7)',
                                borderColor: 'rgba(237, 100, 166, 1)',
                                borderWidth: 1,
                            },
                        ],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: value => `â¹${value.toLocaleString()}`,
                                },
                            },
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: context => `${context.dataset.label}: â¹${context.raw.toLocaleString()}`,
                                },
                            },
                        },
                    },
                });
            }

            function updateCategoryChart(categorySales) {
                const ctx = document.getElementById('categoryChartCanvas').getContext('2d');
                if (categoryChart) categoryChart.destroy();
                categoryChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: categorySales.map(c => c.name || 'Unknown Category'),
                        datasets: [{
                            data: categorySales.map(c => c.revenue),
                            backgroundColor: [
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(255, 206, 86, 0.7)',
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(153, 102, 255, 0.7)',
                            ],
                            borderColor: [
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 99, 132, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                            ],
                            borderWidth: 1,
                        }],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'bottom' },
                            tooltip: {
                                callbacks: {
                                    label: context => {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: â¹${value.toLocaleString()} (${percentage}%)`;
                                    },
                                },
                            },
                        },
                    },
                });
            }

            async function downloadReport(format) {
                showLoading();
                const params = new URLSearchParams({
                    period: currentPeriod,
                    fromDate: fromDateInput.value,
                    toDate: toDateInput.value,
                });

                try {
                    if (format === 'excel') {
                        window.location.href = `/admin/api/sales-report/download/excel?${params}`;
                    } else if (format === 'pdf') {
                        const { jsPDF } = window.jspdf;
                        const doc = new jsPDF();
                        
                        doc.text('FITBOY Sales Report', 14, 20);
                        doc.autoTable({
                            head: [['Metric', 'Value']],
                            body: [
                                ['Total Sales', `â¹${document.getElementById('totalSales').textContent.replace('â¹', '')}`],
                                ['Total Orders', document.getElementById('totalOrders').textContent],
                                ['Average Order', `â¹${document.getElementById('averageOrder').textContent.replace('â¹', '')}`],
                                ['Total Discount', `â¹${document.getElementById('totalDiscount').textContent.replace('â¹', '')}`],
                            ],
                            startY: 30,
                        });

                        const topProducts = Array.from(document.querySelectorAll('#topProductsTable tbody tr')).map(row => {
                            const cells = row.querySelectorAll('td');
                            return [cells[0].textContent, cells[1].textContent, cells[2].textContent.replace('â¹', ''), cells[3].textContent.replace('â¹', '')];
                        });
                        doc.autoTable({
                            head: [['Product', 'Units Sold', 'Revenue', 'Discount']],
                            body: topProducts,
                            startY: doc.lastAutoTable.finalY + 10,
                        });

                        doc.save(`sales-report-${new Date().toISOString().split('T')[0]}.pdf`);
                    }
                } catch (error) {
                    console.error(`Error downloading ${format} report:`, error);
                    Swal.fire('Error', `Failed to download ${format.toUpperCase()} report: ${error.message}`, 'error');
                } finally {
                    hideLoading();
                    downloadMenu.classList.remove('show');
                }
            }

            function printReport() {
                window.print();
            }

            // Initial data load
            loadReportData();
        });
    </script>
</body>
</html>