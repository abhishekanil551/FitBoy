<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>FITBOY Admin - Offer Management</title>
  <link rel="stylesheet" href="/css/style.css"/>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
    .modal-content {
      background-color: #fff;
      margin: 2% auto;
      padding: 0;
      border-radius: 8px;
      width: 90%;
      max-width: 600px;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }
    .modal-header {
      background-color: #f8f9fa;
      padding: 20px;
      border-bottom: 1px solid #dee2e6;
      border-radius: 8px 8px 0 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .modal-title {
      margin: 0;
      font-size: 1.5rem;
      color: #333;
    }
    .close {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #666;
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .close:hover {
      color: #000;
    }
    .modal-body {
      padding: 20px;
    }
    .form-group {
      margin-bottom: 20px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 600;
      color: #333;
    }
    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
      box-sizing: border-box;
    }
    .form-group select[multiple] {
      height: 120px;
    }
    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
      display: none;
    }
    .form-group.error input,
    .form-group.error select,
    .form-group.error textarea {
      border-color: #dc3545;
    }
    .form-group.error .error-message {
      display: block;
    }
    .form-row {
      display: flex;
      gap: 15px;
    }
    .form-row .form-group {
      flex: 1;
    }
    .selected-items {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 10px;
      min-height: 40px;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #f8f9fa;
    }
    .selected-item {
      background-color: #007bff;
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .selected-item .remove-btn {
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 14px;
      padding: 0;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .selected-item .remove-btn:hover {
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
    }
    .modal-footer {
      padding: 20px;
      border-top: 1px solid #dee2e6;
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      text-decoration: none;
      display: inline-block;
      text-align: center;
      transition: all 0.2s;
    }
    .btn-primary {
      background-color: #007bff;
      color: white;
    }
    .btn-primary:hover {
      background-color: #0056b3;
    }
    .btn-secondary {
      background-color: #6c757d;
      color: white;
    }
    .btn-secondary:hover {
      background-color: #5a6268;
    }
    .btn-success {
      background-color: #28a745;
      color: white;
    }
    .btn-success:hover {
      background-color: #218838;
    }
    .btn-warning {
      background-color: #ffc107;
      color: #212529;
    }
    .btn-warning:hover {
      background-color: #e0a800;
    }
    .btn-danger {
      background-color: #dc3545;
      color: white;
    }
    .btn-danger:hover {
      background-color: #c82333;
    }
    .checkbox-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .checkbox-group input[type="checkbox"] {
      width: auto;
      margin: 0;
    }
    .hidden {
      display: none !important;
    }
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    .actions-column {
      display: flex;
      gap: 8px;
    }
    .btn-sm {
      padding: 5px 10px;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class="admin-container">
    <%- include('partials/sidebar', {page: 'offer-management'}) %>
    <div class="main-content">
      <%- include('partials/header') %>
      <div class="dashboard-content">
        <div class="page-header">
          <h1 class="page-title">Offer Management</h1>
          <button class="btn btn-success" onclick="openAddModal()">Add New Offer</button>
        </div>

        <div class="filter-bar">
          <div class="search-box">
            <input type="text" id="searchInput" placeholder="Search offers by title..." onkeyup="filterTable()">
            <button class="search-button" onclick="filterTable()">Search</button>
          </div>
          <div class="filter-options">
            <select name="offerTypeFilter" id="offerTypeFilter" onchange="filterTable()">
              <option value="">All Types</option>
              <option value="product">Product Offer</option>
              <option value="category">Category Offer</option>
            </select>
            <select name="statusFilter" id="statusFilter" onchange="filterTable()">
              <option value="">All Status</option>
              <option value="active">Active</option>
              <option value="expired">Expired</option>
              <option value="scheduled">Scheduled</option>
            </select>
          </div>
        </div>

        <div class="data-container">
          <table class="data-table" id="offerTable">
            <thead>
              <tr>
                <th>Title</th>
                <th>Type</th>
                <th>Discount %</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% offers.forEach(offer => { %>
                <tr>
                  <td><%= offer.title || 'N/A' %></td>
                  <td><%= offer.type === 'product' ? 'Product Offer' : 'Category Offer' %></td>
                  <td><%= offer.discountPercentage ? offer.discountPercentage + '%' : 'N/A' %></td>
                  <td><%= offer.duration?.start ? new Date(offer.duration.start).toDateString() : 'N/A' %></td>
                  <td><%= offer.duration?.end ? new Date(offer.duration.end).toDateString() : 'N/A' %></td>
                  <td>
                    <% 
                      const now = new Date();
                      const status = (!offer.duration || !offer.duration.end || !offer.duration.start || isNaN(new Date(offer.duration.end)) || isNaN(new Date(offer.duration.start))) 
                        ? 'Invalid' 
                        : new Date(offer.duration.end) < now 
                          ? 'Expired' 
                          : new Date(offer.duration.start) > now 
                            ? 'Scheduled' 
                            : offer.isListed 
                              ? 'Active' 
                              : 'Inactive';
                    %>
                    <span class="status-badge status-<%= status.toLowerCase() %>"><%= status %></span>
                  </td>
                  <td class="actions-column">
                    <button class="btn btn-warning btn-sm" onclick="openEditModal('<%= offer._id %>')">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteOffer('<%= offer._id %>')">Delete</button>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>

        <%- include('partials/pagination', {currentPage: 1, totalPages: 3}) %>
      </div>
      <%- include('partials/footer') %>
    </div>
  </div>

  <!-- Add Offer Modal -->
  <div id="addOfferModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Add New Offer</h2>
        <button class="close" onclick="closeModal('addOfferModal')">Ã—</button>
      </div>
      <div class="modal-body">
        <form id="addOfferForm">
          <div class="form-group">
            <label for="addTitle">Offer Title *</label>
            <input type="text" id="addTitle" name="title" required>
            <div class="error-message">Title is required</div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="addDiscountPercentage">Discount Percentage *</label>
              <input type="number" id="addDiscountPercentage" name="discountPercentage" min="1" max="100" required>
              <div class="error-message">Please enter a valid discount percentage (1-100)</div>
            </div>
            <div class="form-group">
              <label for="addType">Offer Type *</label>
              <select id="addType" name="type" onchange="toggleOfferType('add')" required>
                <option value="">Select Type</option>
                <option value="product">Product Offer</option>
                <option value="category">Category Offer</option>
              </select>
              <div class="error-message">Please select an offer type</div>
            </div>
          </div>

          <div class="form-group">
            <label for="addBanner">Banner URL</label>
            <input type="url" id="addBanner" name="banner" placeholder="https://example.com/banner.jpg">
            <div class="error-message">Please enter a valid URL</div>
          </div>

          <div id="addProductSection" class="form-group hidden">
            <label for="addProductSelect">Select Products *</label>
            <select id="addProductSelect" name="products" multiple onchange="updateSelectedProducts('add')">
              <% products.forEach(product => { %>
                <option value="<%= product._id %>"><%= product.name %></option>
              <% }) %>
            </select>
            <div class="selected-items" id="addSelectedProducts">
              <span style="color: #666; font-size: 14px;">No products selected</span>
            </div>
            <div class="error-message">Please select at least one product</div>
          </div>

          <div id="addCategorySection" class="form-group hidden">
            <label for="addCategorySelect">Select Categories *</label>
            <select id="addCategorySelect" name="categories" multiple onchange="updateSelectedCategories('add')">
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>"><%= category.name %></option>
              <% }) %>
            </select>
            <div class="selected-items" id="addSelectedCategories">
              <span style="color: #666; font-size: 14px;">No categories selected</span>
            </div>
            <div class="error-message">Please select at least one category</div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="addStartDate">Start Date *</label>
              <input type="date" id="addStartDate" name="startDate" required>
              <div class="error-message">Start date is required</div>
            </div>
            <div class="form-group">
              <label for="addEndDate">End Date *</label>
              <input type="date" id="addEndDate" name="endDate" required>
              <div class="error-message">End date is required and must be after start date</div>
            </div>
          </div>

          <div class="form-group">
            <div class="checkbox-group">
              <input type="checkbox" id="addIsListed" name="isListed" checked>
              <label for="addIsListed">Active Offer</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeModal('addOfferModal')">Cancel</button>
        <button class="btn btn-primary" onclick="submitAddOffer()">Add Offer</button>
      </div>
    </div>
  </div>

  <!-- Edit Offer Modal -->
  <div id="editOfferModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Edit Offer</h2>
        <button class="close" onclick="closeModal('editOfferModal')">Ã—</button>
      </div>
      <div class="modal-body">
        <form id="editOfferForm">
          <input type="hidden" id="editOfferId" name="offerId">
          
          <div class="form-group">
            <label for="editTitle">Offer Title *</label>
            <input type="text" id="editTitle" name="title" required>
            <div class="error-message">Title is required</div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="editDiscountPercentage">Discount Percentage *</label>
              <input type="number" id="editDiscountPercentage" name="discountPercentage" min="1" max="100" required>
              <div class="error-message">Please enter a valid discount percentage (1-100)</div>
            </div>
            <div class="form-group">
              <label for="editType">Offer Type *</label>
              <select id="editType" name="type" onchange="toggleOfferType('edit')" required>
                <option value="">Select Type</option>
                <option value="product">Product Offer</option>
                <option value="category">Category Offer</option>
              </select>
              <div class="error-message">Please select an offer type</div>
            </div>
          </div>

          <div class="form-group">
            <label for="editBanner">Banner URL</label>
            <input type="url" id="editBanner" name="banner" placeholder="https://example.com/banner.jpg">
            <div class="error-message">Please enter a valid URL</div>
          </div>

          <div id="editProductSection" class="form-group hidden">
            <label for="editProductSelect">Select Products *</label>
            <select id="editProductSelect" name="products" multiple onchange="updateSelectedProducts('edit')">
              <% products.forEach(product => { %>
                <option value="<%= product._id %>"><%= product.name %></option>
              <% }) %>
            </select>
            <div class="selected-items" id="editSelectedProducts">
              <span style="color: #666; font-size: 14px;">No products selected</span>
            </div>
            <div class="error-message">Please select at least one product</div>
          </div>

          <div id="editCategorySection" class="form-group hidden">
            <label for="editCategorySelect">Select Categories *</label>
            <select id="editCategorySelect" name="categories" multiple onchange="updateSelectedCategories('edit')">
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>"><%= category.name %></option>
              <% }) %>
            </select>
            <div class="selected-items" id="editSelectedCategories">
              <span style="color: #666; font-size: 14px;">No categories selected</span>
            </div>
            <div class="error-message">Please select at least one category</div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="editStartDate">Start Date *</label>
              <input type="date" id="editStartDate" name="startDate" required>
              <div class="error-message">Start date is required</div>
            </div>
            <div class="form-group">
              <label for="editEndDate">End Date *</label>
              <input type="date" id="editEndDate" name="endDate" required>
              <div class="error-message">End date is required and must be after start date</div>
            </div>
          </div>

          <div class="form-group">
            <div class="checkbox-group">
              <input type="checkbox" id="editIsListed" name="isListed">
              <label for="editIsListed">Active Offer</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeModal('editOfferModal')">Cancel</button>
        <button class="btn btn-primary" onclick="submitEditOffer()">Update Offer</button>
      </div>
    </div>
  </div>

  <script>
    window.products = <%- JSON.stringify(products) %>;
    window.categories = <%- JSON.stringify(categories) %>;
    window.offers = <%- JSON.stringify(offers) %>;

    window.onload = function() {
      const urlParams = new URLSearchParams(window.location.search);
      const successMessage = urlParams.get('success');
      if (successMessage) {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: successMessage,
          timer: 3000,
          showConfirmButton: false
        });
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    };

    const selectedProducts = { add: [], edit: [] };
    const selectedCategories = { add: [], edit: [] };

    function closeModal(modalId) {
      document.getElementById(modalId).style.display = 'none';
      resetForm(modalId === 'addOfferModal' ? 'add' : 'edit');
    }

    function resetForm(mode) {
      const form = document.getElementById(`${mode}OfferForm`);
      form.reset();
      selectedProducts[mode] = [];
      selectedCategories[mode] = [];
      updateSelectedDisplay(mode);
      clearErrors(mode);
      const productSelect = document.getElementById(`${mode}ProductSelect`);
      const categorySelect = document.getElementById(`${mode}CategorySelect`);
      if (productSelect) Array.from(productSelect.options).forEach(o => o.selected = false);
      if (categorySelect) Array.from(categorySelect.options).forEach(o => o.selected = false);
    }

    function clearErrors(mode) {
      const formGroups = document.querySelectorAll(`#${mode}OfferForm .form-group`);
      formGroups.forEach(group => {
        group.classList.remove('error');
        const errorMessage = group.querySelector('.error-message');
        if (errorMessage) errorMessage.style.display = 'none';
      });
    }

    function showError(inputId, message, mode) {
      const formGroup = document.getElementById(inputId).closest('.form-group');
      formGroup.classList.add('error');
      const errorMessage = formGroup.querySelector('.error-message');
      errorMessage.textContent = message;
      errorMessage.style.display = 'block';
    }

    function validateForm(mode) {
      clearErrors(mode);
      let isValid = true;

      const title = document.getElementById(`${mode}Title`).value.trim();
      const discountPercentage = parseInt(document.getElementById(`${mode}DiscountPercentage`).value);
      const type = document.getElementById(`${mode}Type`).value;
      const startDate = document.getElementById(`${mode}StartDate`).value;
      const endDate = document.getElementById(`${mode}EndDate`).value;
      const banner = document.getElementById(`${mode}Banner`).value.trim();

      if (!title) {
        showError(`${mode}Title`, 'Title is required', mode);
        isValid = false;
      }

      if (!discountPercentage || discountPercentage < 1 || discountPercentage > 100) {
        showError(`${mode}DiscountPercentage`, 'Please enter a valid discount percentage (1-100)', mode);
        isValid = false;
      }

      if (!type) {
        showError(`${mode}Type`, 'Please select an offer type', mode);
        isValid = false;
      }

      if (type === 'product' && selectedProducts[mode].length === 0) {
        showError(`${mode}ProductSelect`, 'Please select at least one product', mode);
        isValid = false;
      }

      if (type === 'category' && selectedCategories[mode].length === 0) {
        showError(`${mode}CategorySelect`, 'Please select at least one category', mode);
        isValid = false;
      }

      if (!startDate) {
        showError(`${mode}StartDate`, 'Start date is required', mode);
        isValid = false;
      }

      if (!endDate) {
        showError(`${mode}EndDate`, 'End date is required', mode);
        isValid = false;
      }

      if (startDate && endDate && new Date(endDate) < new Date(startDate)) {
        showError(`${mode}EndDate`, 'End date must be after start date', mode);
        isValid = false;
      }

      if (banner && !isValidUrl(banner)) {
        showError(`${mode}Banner`, 'Please enter a valid URL', mode);
        isValid = false;
      }

      return isValid;
    }

    function isValidUrl(url) {
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    }

    function updateSelectedDisplay(mode) {
      const productList = document.getElementById(`${mode}SelectedProducts`);
      const categoryList = document.getElementById(`${mode}SelectedCategories`);

      productList.innerHTML = selectedProducts[mode].length
        ? selectedProducts[mode].map(p => `
            <div class="selected-item">
              ${p.name}
              <button class="remove-btn" onclick="removeProduct('${p._id}', '${mode}')">Ã—</button>
            </div>
          `).join('')
        : '<span style="color: #666; font-size: 14px;">No products selected</span>';

      categoryList.innerHTML = selectedCategories[mode].length
        ? selectedCategories[mode].map(c => `
            <div class="selected-item">
              ${c.name}
              <button class="remove-btn" onclick="removeCategory('${c._id}', '${mode}')">Ã—</button>
            </div>
          `).join('')
        : '<span style="color: #666; font-size: 14px;">No categories selected</span>';
    }

    function removeProduct(productId, mode) {
      selectedProducts[mode] = selectedProducts[mode].filter(p => p._id !== productId);
      const select = document.getElementById(`${mode}ProductSelect`);
      Array.from(select.options).find(o => o.value === productId).selected = false;
      updateSelectedDisplay(mode);
    }

    function removeCategory(categoryId, mode) {
      selectedCategories[mode] = selectedCategories[mode].filter(c => c._id !== categoryId);
      const select = document.getElementById(`${mode}CategorySelect`);
      Array.from(select.options).find(o => o.value === categoryId).selected = false;
      updateSelectedDisplay(mode);
    }

    function updateSelectedProducts(mode) {
      const select = document.getElementById(`${mode}ProductSelect`);
      selectedProducts[mode] = Array.from(select.selectedOptions).map(option => ({
        _id: option.value,
        name: option.text
      }));
      updateSelectedDisplay(mode);
    }

    function updateSelectedCategories(mode) {
      const select = document.getElementById(`${mode}CategorySelect`);
      selectedCategories[mode] = Array.from(select.selectedOptions).map(option => ({
        _id: option.value,
        name: option.text
      }));
      updateSelectedDisplay(mode);
    }

    function toggleOfferType(mode) {
      const type = document.getElementById(`${mode}Type`).value;
      const productSection = document.getElementById(`${mode}ProductSection`);
      const categorySection = document.getElementById(`${mode}CategorySection`);

      productSection.classList.toggle('hidden', type !== 'product');
      categorySection.classList.toggle('hidden', type !== 'category');
    }

    function openAddModal() {
      resetForm('add');
      document.getElementById('addOfferModal').style.display = 'block';
    }

    function openEditModal(offerId) {
      const offer = window.offers.find(o => o._id.toString() === offerId.toString());
      if (!offer) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Offer not found'
        });
        return;
      }

      document.getElementById('editOfferId').value = offer._id;
      document.getElementById('editTitle').value = offer.title || '';
      document.getElementById('editDiscountPercentage').value = offer.discountPercentage || '';
      document.getElementById('editType').value = offer.type || '';
      document.getElementById('editBanner').value = offer.banner || '';
      document.getElementById('editStartDate').value = offer.duration?.start ? new Date(offer.duration.start).toISOString().slice(0, 10) : '';
      document.getElementById('editEndDate').value = offer.duration?.end ? new Date(offer.duration.end).toISOString().slice(0, 10) : '';
      document.getElementById('editIsListed').checked = offer.isListed || false;

      selectedProducts.edit = offer.products?.map(p => ({ _id: p._id.toString(), name: p.name })) || [];
      selectedCategories.edit = Array.isArray(offer.categoryId)
        ? offer.categoryId.map(c => ({ _id: c._id.toString(), name: c.name }))
        : offer.categoryId ? [{ _id: offer.categoryId._id.toString(), name: offer.categoryId.name }] : [];

      const productSelect = document.getElementById('editProductSelect');
      Array.from(productSelect.options).forEach(option => {
        option.selected = selectedProducts.edit.some(p => p._id === option.value);
      });

      const categorySelect = document.getElementById('editCategorySelect');
      Array.from(categorySelect.options).forEach(option => {
        option.selected = selectedCategories.edit.some(c => c._id === option.value);
      });

      toggleOfferType('edit');
      updateSelectedDisplay('edit');
      document.getElementById('editOfferModal').style.display = 'block';
    }

    async function submitAddOffer() {
      if (!validateForm('add')) return;

      const formData = {
        title: document.getElementById('addTitle').value.trim(),
        discountPercentage: parseInt(document.getElementById('addDiscountPercentage').value),
        type: document.getElementById('addType').value,
        products: selectedProducts.add.map(p => p._id),
        categoryId: selectedCategories.add.map(c => c._id),
        banner: document.getElementById('addBanner').value.trim() || null,
        duration: {
          start: new Date(document.getElementById('addStartDate').value),
          end: new Date(document.getElementById('addEndDate').value)
        },
        description: ''
      };

      try {
        const response = await fetch('/admin/add-offer', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          window.location.href = '/admin/offer-management?success=Offer added successfully';
        } else {
          const error = await response.json();
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `Failed to add offer: ${error.message}`
          });
        }
      } catch (error) {
        console.error('Add offer error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while adding the offer.'
        });
      }
    }

    async function submitEditOffer() {
      if (!validateForm('edit')) return;

      const formData = {
        id: document.getElementById('editOfferId').value,
        title: document.getElementById('editTitle').value.trim(),
        discountPercentage: parseInt(document.getElementById('editDiscountPercentage').value),
        type: document.getElementById('editType').value,
        products: selectedProducts.edit.map(p => p._id),
        categoryId: selectedCategories.edit.map(c => c._id),
        banner: document.getElementById('editBanner').value.trim() || null,
        duration: {
          start: new Date(document.getElementById('editStartDate').value),
          end: new Date(document.getElementById('editEndDate').value)
        },
        description: ''
      };

      try {
        const response = await fetch('/admin/edit-offer', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          window.location.href = '/admin/offer-management?success=Offer updated successfully';
        } else {
          const error = await response.json();
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `Failed to update offer: ${error.message}`
          });
        }
      } catch (error) {
        console.error('Edit offer error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while updating the offer.'
        });
      }
    }

    async function deleteOffer(offerId) {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to delete this offer?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, delete it!'
      });

      if (!result.isConfirmed) return;

      try {
        const response = await fetch('/admin/delete-offer', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: offerId })
        });

        if (response.ok) {
          window.location.href = '/admin/offer-management?success=Offer deleted successfully';
        } else {
          const error = await response.json();
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `Failed to delete offer: ${error.message}`
          });
        }
      } catch (error) {
        console.error('Delete offer error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to delete offer.'
        });
      }
    }

    function filterTable() {
      const searchInput = document.getElementById('searchInput').value.toLowerCase();
      const offerTypeFilter = document.getElementById('offerTypeFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;
      const rows = document.querySelectorAll('#offerTable tbody tr');

      rows.forEach(row => {
        const title = row.cells[0].textContent.toLowerCase();
        const type = row.cells[1].textContent.includes('Product') ? 'product' : 'category';
        const status = row.cells[5].textContent.toLowerCase();

        const matchesSearch = title.includes(searchInput);
        const matchesType = !offerTypeFilter || type === offerTypeFilter;
        const matchesStatus = !statusFilter || status === statusFilter;

        row.style.display = matchesSearch && matchesType && matchesStatus ? '' : 'none';
      });
    }

    window.onclick = function(event) {
      const modals = document.querySelectorAll('.modal');
      modals.forEach(modal => {
        if (event.target === modal) {
          modal.style.display = 'none';
          resetForm(modal.id === 'addOfferModal' ? 'add' : 'edit');
        }
      });
    };
  </script>
</body>
</html>
