<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - FitBoy Games</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Orders Page Styles */
:root {
  --primary-color: #3a86ff;
  --secondary-color: #ff006e;
  --background-color: #f8f9fa;
  --card-background: #ffffff;
  --text-color: #333333;
  --border-color: #e0e0e0;
  --success-color: #4caf50;
  --warning-color: #ff9800;
  --error-color: #f44336;
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.orders-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.page-title {
  text-align: center;
  margin-bottom: 2rem;
  color: var(--text-color);
}

.search-container {
  margin-bottom: 2rem;
}

.search-box {
  display: flex;
  max-width: 500px;
  margin: 0 auto;
}

.search-box input {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: 4px 0 0 4px;
  font-size: 1rem;
}

.search-box button {
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 0 4px 4px 0;
  padding: 0 1.5rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.search-box button:hover {
  background-color: #2a75e6;
}

.orders-list {
  display: grid;
  gap: 1.5rem;
}

.order-card {
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
  overflow: hidden;
}

.order-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
  background-color: var(--background-color);
  border-bottom: 1px solid var(--border-color);
}

.order-id {
  font-weight: bold;
  font-size: 1.1rem;
}

.order-date {
  color: #666;
  font-size: 0.9rem;
}

.order-status {
  padding: 0.25rem 0.75rem;
  border-radius: 50px;
  font-size: 0.8rem;
  font-weight: bold;
  text-transform: uppercase;
}

.status-pending {
  background-color: #fff3cd;
  color: #856404;
}

.status-processing {
  background-color: #cce5ff;
  color: #004085;
}

.status-shipped {
  background-color: #d1ecf1;
  color: #0c5460;
}

.status-delivered {
  background-color: #d4edda;
  color: #155724;
}

.status-cancelled {
  background-color: #f8d7da;
  color: #721c24;
}

.status-returned {
  background-color: #e2e3e5;
  color: #383d41;
}

.order-body {
  padding: 1.5rem;
}

.order-summary {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.order-summary-item {
  text-align: center;
}

.summary-label {
  font-size: 0.9rem;
  color: #666;
  margin-bottom: 0.25rem;
}

.summary-value {
  font-weight: bold;
}

.order-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
  flex-wrap: wrap;
}

.order-btn {
  padding: 0.5rem 1rem;
  border-radius: 4px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.view-btn {
  background-color: var(--primary-color);
  color: white;
  border: none;
}

.view-btn:hover {
  background-color: #2a75e6;
}

.cancel-btn {
  background-color: white;
  color: var(--error-color);
  border: 1px solid var(--error-color);
}

.cancel-btn:hover {
  background-color: var(--error-color);
  color: white;
}

.return-btn {
  background-color: white;
  color: var(--warning-color);
  border: 1px solid var(--warning-color);
}

.return-btn:hover {
  background-color: var(--warning-color);
  color: white;
}

.invoice-btn {
  background-color: white;
  color: var(--text-color);
  border: 1px solid var(--border-color);
}

.invoice-btn:hover {
  background-color: var(--background-color);
}

.loading {
  text-align: center;
  padding: 2rem;
  color: var(--text-color);
}

.no-orders {
  text-align: center;
  padding: 3rem 1rem;
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
}

.no-orders-icon {
  font-size: 3rem;
  color: #ccc;
  margin-bottom: 1rem;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal {
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
  width: 90%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-title {
  font-weight: bold;
  font-size: 1.2rem;
  margin: 0;
}

.modal-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #666;
}

.modal-body {
  padding: 1.5rem;
}

.modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid var(--border-color);
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
}

.modal-btn {
  padding: 0.5rem 1rem;
  border-radius: 4px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s;
}

.confirm-btn {
  background-color: var(--error-color);
  color: white;
  border: none;
}

.confirm-btn:hover {
  background-color: #d32f2f;
}

.cancel-modal-btn {
  background-color: white;
  color: var(--text-color);
  border: 1px solid var(--border-color);
}

.cancel-modal-btn:hover {
  background-color: var(--background-color);
}

.reason-textarea {
  width: 100%;
  min-height: 100px;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  resize: vertical;
  margin-top: 0.5rem;
}

/* Order Detail Page Styles */
.order-detail-container {
  max-width: 1000px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.order-detail-card {
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
  overflow: hidden;
  margin-bottom: 2rem;
}

.order-detail-header {
  padding: 1.5rem;
  background-color: var(--background-color);
  border-bottom: 1px solid var(--border-color);
}

.order-detail-title {
  margin: 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.order-detail-meta {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-top: 1rem;
}

.meta-item {
  display: flex;
  flex-direction: column;
}

.meta-label {
  font-size: 0.9rem;
  color: #666;
  margin-bottom: 0.25rem;
}

.meta-value {
  font-weight: bold;
}

.order-detail-body {
  padding: 1.5rem;
}

.order-items {
  margin-bottom: 2rem;
}

.order-item {
  display: grid;
  grid-template-columns: 80px 1fr auto;
  gap: 1rem;
  padding: 1rem 0;
  border-bottom: 1px solid var(--border-color);
}

.item-image {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 4px;
}

.item-details {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.item-title {
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.item-price,
.item-quantity {
  color: var(--text-color);
  font-size: 0.9rem;
}

.item-total {
  font-weight: bold;
  align-self: center;
}

.order-totals {
  margin-left: auto;
  width: 100%;
  max-width: 300px;
}

.total-row {
  display: flex;
  justify-content: space-between;
  padding: 0.5rem 0;
}

.total-label {
  color: #666;
}

.total-value {
  font-weight: bold;
}

.grand-total {
  border-top: 2px solid var(--border-color);
  margin-top: 0.5rem;
  padding-top: 0.5rem;
  font-size: 1.1rem;
}

.shipping-info {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid var(--border-color);
}

.shipping-address {
  margin-top: 0.5rem;
  padding: 1rem;
  background-color: var(--background-color);
  border-radius: 4px;
}

.order-detail-actions {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
  flex-wrap: wrap;
}

    </style>
</head>
<body>
    <%- include('partials/header') %>

    <main class="orders-container">
        <h1 class="page-title">My Orders</h1>
        
        <div class="search-container">
            <div class="search-box">
                <input type="text" id="order-search" placeholder="Search by Order ID">
                <button id="search-btn"><i class="fas fa-search"></i></button>
            </div>
        </div>
        
        <div class="orders-list" id="orders-list">
            <!-- Orders will be loaded here via JavaScript -->
            <div class="loading">Loading your orders...</div>
        </div>
    </main>

    <%- include('partials/footer') %>
    
    <script >
        document.addEventListener("DOMContentLoaded", () => {
  // Load orders from localStorage (in a real app, this would come from the server)
  const orders = JSON.parse(localStorage.getItem("orders")) || []
  const ordersList = document.getElementById("orders-list")

  // Display orders
  if (orders.length === 0) {
    ordersList.innerHTML = `
            <div class="no-orders">
                <div class="no-orders-icon">
                    <i class="fas fa-shopping-bag"></i>
                </div>
                <h2>No Orders Found</h2>
                <p>You haven't placed any orders yet.</p>
                <a href="/games" class="order-btn view-btn">Start Shopping</a>
            </div>
        `
  } else {
    renderOrders(orders)
  }

  // Search functionality
  const searchBtn = document.getElementById("search-btn")
  const searchInput = document.getElementById("order-search")

  if (searchBtn && searchInput) {
    searchBtn.addEventListener("click", () => {
      searchOrders(searchInput.value)
    })

    searchInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        searchOrders(searchInput.value)
      }
    })
  }

  // Handle modal events
  document.addEventListener("click", (e) => {
    // Cancel order button
    if (e.target.classList.contains("cancel-btn") || e.target.closest(".cancel-btn")) {
      const orderId = e.target.dataset.id || e.target.closest(".cancel-btn").dataset.id
      showCancelModal(orderId)
    }

    // Return order button
    if (e.target.classList.contains("return-btn") || e.target.closest(".return-btn")) {
      const orderId = e.target.dataset.id || e.target.closest(".return-btn").dataset.id
      showReturnModal(orderId)
    }

    // Download invoice button
    if (e.target.classList.contains("invoice-btn") || e.target.closest(".invoice-btn")) {
      const orderId = e.target.dataset.id || e.target.closest(".invoice-btn").dataset.id
      generateInvoice(orderId)
    }

    // Close modal button
    if (e.target.classList.contains("modal-close") || e.target.closest(".modal-close")) {
      closeModal()
    }

    // Cancel modal button
    if (e.target.classList.contains("cancel-modal-btn") || e.target.closest(".cancel-modal-btn")) {
      closeModal()
    }

    // Confirm cancel order button
    if (e.target.id === "confirm-cancel" || e.target.closest("#confirm-cancel")) {
      const orderId = document.querySelector(".modal").dataset.orderId
      const reason = document.getElementById("cancel-reason").value
      cancelOrder(orderId, reason)
    }

    // Confirm return order button
    if (e.target.id === "confirm-return" || e.target.closest("#confirm-return")) {
      const orderId = document.querySelector(".modal").dataset.orderId
      const reason = document.getElementById("return-reason").value

      if (!reason.trim()) {
        alert("Please provide a reason for the return")
        return
      }

      returnOrder(orderId, reason)
    }
  })
})

// Render orders in the orders list
function renderOrders(orders) {
  const ordersList = document.getElementById("orders-list")
  ordersList.innerHTML = ""

  orders.forEach((order) => {
    const orderDate = new Date(order.orderDate)
    const formattedDate = orderDate.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    })

    const orderElement = document.createElement("div")
    orderElement.className = "order-card"
    orderElement.innerHTML = `
            <div class="order-header">
                <div class="order-id">${order.orderId}</div>
                <div class="order-date">${formattedDate}</div>
                <div class="order-status status-${order.status.toLowerCase()}">${order.status}</div>
            </div>
            <div class="order-body">
                <div class="order-summary">
                    <div class="order-summary-item">
                        <div class="summary-label">Items</div>
                        <div class="summary-value">${order.items.reduce((total, item) => total + item.quantity, 0)}</div>
                    </div>
                    <div class="order-summary-item">
                        <div class="summary-label">Total</div>
                        <div class="summary-value">$${order.total.toFixed(2)}</div>
                    </div>
                    <div class="order-summary-item">
                        <div class="summary-label">Payment</div>
                        <div class="summary-value">${order.paymentMethod}</div>
                    </div>
                </div>
                <div class="order-actions">
                    <a href="/order-detail?id=${order.orderId}" class="order-btn view-btn">
                        <i class="fas fa-eye"></i> View Details
                    </a>
                    ${
                      order.status === "Delivered"
                        ? `
                        <button class="order-btn return-btn" data-id="${order.orderId}">
                            <i class="fas fa-undo"></i> Return Order
                        </button>
                    `
                        : ""
                    }
                    ${
                      order.status !== "Cancelled" && order.status !== "Delivered" && order.status !== "Returned"
                        ? `
                        <button class="order-btn cancel-btn" data-id="${order.orderId}">
                            <i class="fas fa-times"></i> Cancel Order
                        </button>
                    `
                        : ""
                    }
                    <button class="order-btn invoice-btn" data-id="${order.orderId}">
                        <i class="fas fa-file-pdf"></i> Download Invoice
                    </button>
                </div>
            </div>
        `
    ordersList.appendChild(orderElement)
  })
}

// Search orders by order ID
function searchOrders(query) {
  query = query.trim().toLowerCase()
  const orders = JSON.parse(localStorage.getItem("orders")) || []

  if (!query) {
    renderOrders(orders)
    return
  }

  const filteredOrders = orders.filter((order) => order.orderId.toLowerCase().includes(query))

  renderOrders(filteredOrders)
}

// Show cancel order modal
function showCancelModal(orderId) {
  const modalHTML = `
        <div class="modal-overlay">
            <div class="modal" data-order-id="${orderId}">
                <div class="modal-header">
                    <h3 class="modal-title">Cancel Order</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to cancel this order?</p>
                    <p>Order ID: ${orderId}</p>
                    <div>
                        <label for="cancel-reason">Reason for cancellation (optional):</label>
                        <textarea id="cancel-reason" class="reason-textarea" placeholder="Enter reason for cancellation"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="confirm-cancel" class="modal-btn confirm-btn">Confirm Cancel</button>
                    <button class="modal-btn cancel-modal-btn">Close</button>
                </div>
            </div>
        </div>
    `

  document.body.insertAdjacentHTML("beforeend", modalHTML)
}

// Show return order modal
function showReturnModal(orderId) {
  const modalHTML = `
        <div class="modal-overlay">
            <div class="modal" data-order-id="${orderId}">
                <div class="modal-header">
                    <h3 class="modal-title">Return Order</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Please provide a reason for returning this order:</p>
                    <p>Order ID: ${orderId}</p>
                    <div>
                        <label for="return-reason">Reason for return (required):</label>
                        <textarea id="return-reason" class="reason-textarea" placeholder="Enter reason for return"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="confirm-return" class="modal-btn confirm-btn">Confirm Return</button>
                    <button class="modal-btn cancel-modal-btn">Close</button>
                </div>
            </div>
        </div>
    `

  document.body.insertAdjacentHTML("beforeend", modalHTML)
}

// Close modal
function closeModal() {
  const modalOverlay = document.querySelector(".modal-overlay")
  if (modalOverlay) {
    modalOverlay.remove()
  }
}

// Cancel order
function cancelOrder(orderId, reason) {
  const orders = JSON.parse(localStorage.getItem("orders")) || []
  const orderIndex = orders.findIndex((order) => order.orderId === orderId)

  if (orderIndex !== -1) {
    // Update order status
    orders[orderIndex].status = "Cancelled"
    orders[orderIndex].cancelReason = reason
    orders[orderIndex].cancelDate = new Date().toISOString()

    // In a real app, you would also update inventory here
    // For each item in the order, increment the stock

    localStorage.setItem("orders", JSON.stringify(orders))

    // Close modal and refresh orders list
    closeModal()
    renderOrders(orders)

    // Show success message
    alert("Order cancelled successfully")
  }
}

// Return order
function returnOrder(orderId, reason) {
  const orders = JSON.parse(localStorage.getItem("orders")) || []
  const orderIndex = orders.findIndex((order) => order.orderId === orderId)

  if (orderIndex !== -1) {
    // Update order status
    orders[orderIndex].status = "Returned"
    orders[orderIndex].returnReason = reason
    orders[orderIndex].returnDate = new Date().toISOString()

    // In a real app, you would also update inventory here
    // For each item in the order, increment the stock

    localStorage.setItem("orders", JSON.stringify(orders))

    // Close modal and refresh orders list
    closeModal()
    renderOrders(orders)

    // Show success message
    alert("Return request submitted successfully")
  }
}

// Generate and download invoice
function generateInvoice(orderId) {
  const orders = JSON.parse(localStorage.getItem("orders")) || []
  const order = orders.find((order) => order.orderId === orderId)

  if (!order) {
    alert("Order not found")
    return
  }

  // In a real app, you would generate a PDF here
  // For this example, we'll just open a new window with the invoice

  const orderDate = new Date(order.orderDate)
  const formattedDate = orderDate.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  })

  const invoiceWindow = window.open("", "_blank")
  invoiceWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>Invoice - ${order.orderId}</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    margin: 0;
                    padding: 20px;
                    color: #333;
                }
                .invoice-header {
                    text-align: center;
                    margin-bottom: 30px;
                }
                .invoice-title {
                    font-size: 24px;
                    margin-bottom: 10px;
                }
                .company-name {
                    font-size: 18px;
                    font-weight: bold;
                }
                .invoice-details {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 30px;
                }
                .invoice-id {
                    font-weight: bold;
                }
                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-bottom: 30px;
                }
                th, td {
                    padding: 10px;
                    text-align: left;
                    border-bottom: 1px solid #ddd;
                }
                th {
                    background-color: #f2f2f2;
                }
                .totals {
                    width: 300px;
                    margin-left: auto;
                }
                .total-row {
                    display: flex;
                    justify-content: space-between;
                    padding: 5px 0;
                }
                .grand-total {
                    font-weight: bold;
                    font-size: 18px;
                    border-top: 2px solid #333;
                    padding-top: 10px;
                    margin-top: 10px;
                }
                .footer {
                    margin-top: 50px;
                    text-align: center;
                    font-size: 14px;
                    color: #666;
                }
                @media print {
                    .no-print {
                        display: none;
                    }
                }
            </style>
        </head>
        <body>
            <div class="invoice-header">
                <div class="invoice-title">INVOICE</div>
                <div class="company-name">FitBoy Games</div>
                <div>123 Gaming Street, Game City, GC 12345</div>
                <div>Phone: (123) 456-7890 | Email: fitboy55551@gmail.com</div>
            </div>
            
            <div class="invoice-details">
                <div>
                    <div><strong>Bill To:</strong></div>
                    <div>Customer</div>
                    <div>${order.address}</div>
                </div>
                <div>
                    <div><span class="invoice-id">Invoice #:</span> INV-${order.orderId}</div>
                    <div><strong>Order ID:</strong> ${order.orderId}</div>
                    <div><strong>Date:</strong> ${formattedDate}</div>
                    <div><strong>Payment Method:</strong> ${order.paymentMethod}</div>
                </div>
            </div>
            
            <table>
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    ${order.items
                      .map(
                        (item) => `
                        <tr>
                            <td>${item.title}</td>
                            <td>$${item.price.toFixed(2)}</td>
                            <td>${item.quantity}</td>
                            <td>$${(item.price * item.quantity).toFixed(2)}</td>
                        </tr>
                    `,
                      )
                      .join("")}
                </tbody>
            </table>
            
            <div class="totals">
                <div class="total-row">
                    <span>Subtotal:</span>
                    <span>$${order.subtotal.toFixed(2)}</span>
                </div>
                <div class="total-row">
                    <span>Taxes:</span>
                    <span>$${order.taxes.toFixed(2)}</span>
                </div>
                <div class="total-row">
                    <span>Shipping:</span>
                    <span>${order.shipping === 0 ? "FREE" : "$" + order.shipping.toFixed(2)}</span>
                </div>
                ${
                  order.discountAmount > 0
                    ? `
                    <div class="total-row">
                        <span>Discount:</span>
                        <span>-$${order.discountAmount.toFixed(2)}</span>
                    </div>
                `
                    : ""
                }
                <div class="total-row grand-total">
                    <span>Total:</span>
                    <span>$${order.total.toFixed(2)}</span>
                </div>
            </div>
            
            <div class="footer">
                <p>Thank you for your business!</p>
            </div>
            
            <div class="no-print" style="text-align: center; margin-top: 30px;">
                <button onclick="window.print()">Print Invoice</button>
            </div>
        </body>
        </html>
    `)
  invoiceWindow.document.close()
}

    </script>
</body>
</html>
